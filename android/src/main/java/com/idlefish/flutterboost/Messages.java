// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
package com.idlefish.flutterboost;


import androidx.annotation.Nullable;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CommonParams {
    private String pageName;
    public String getPageName() { return pageName; }
    public void setPageName(String setterArg) { this.pageName = setterArg; }

    private String uniqueId;
    public String getUniqueId() { return uniqueId; }
    public void setUniqueId(String setterArg) { this.uniqueId = setterArg; }

    private HashMap<String, Object> arguments;
    public HashMap<String, Object> getArguments() { return arguments; }
    public void setArguments(HashMap<String, Object> setterArg) { this.arguments = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("pageName", pageName);
      toMapResult.put("uniqueId", uniqueId);
      toMapResult.put("arguments", arguments);
      return toMapResult;
    }
    static CommonParams fromMap(Map<String, Object> map) {
      CommonParams fromMapResult = new CommonParams();
      Object pageName = map.get("pageName");
      fromMapResult.pageName = (String)pageName;
      Object uniqueId = map.get("uniqueId");
      fromMapResult.uniqueId = (String)uniqueId;

      if (map.get("arguments") instanceof Map) {
        Map<Object, Object> arguments = (Map<Object, Object>)map.get("arguments");
        HashMap<String, Object> newArguments = new HashMap();
        if (arguments != null) {
          for (Map.Entry<Object, Object> entry : arguments.entrySet()) {
            newArguments.put(entry.getKey().toString(), entry.getValue());
          }
        }

        fromMapResult.arguments = newArguments;
      }
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PanGestureParams {
    private String uniqueId;
    public String getUniqueId() { return uniqueId; }
    public void setUniqueId(String setterArg) { this.uniqueId = setterArg; }

    private Boolean enable;
    public Boolean getEnable() { return enable; }
    public void setEnable(Boolean setterArg) { this.enable = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uniqueId", uniqueId);
      toMapResult.put("enable", enable);
      return toMapResult;
    }
    static PanGestureParams fromMap(Map<String, Object> map) {
      PanGestureParams fromMapResult = new PanGestureParams();
      Object uniqueId = map.get("uniqueId");
      fromMapResult.uniqueId = (String)uniqueId;
      Object enable = map.get("enable");
      fromMapResult.enable = (Boolean)enable;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterRouterApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterRouterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void pushRoute(CommonParams argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterApi.pushRoute", new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void popRoute(CommonParams argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterApi.popRoute", new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void removeRoute(CommonParams argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterApi.removeRoute", new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onForeground(CommonParams argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterApi.onForeground", new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onBackground(CommonParams argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterApi.onBackground", new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onNativeViewShow(CommonParams argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterApi.onNativeViewShow", new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void onNativeViewHide(CommonParams argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterApi.onNativeViewHide", new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  public interface RouterResult<T> {
    void result(@Nullable T result);
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NativeRouterApi {
    void pushNativeRoute(CommonParams arg);
    void pushFlutterRoute(CommonParams arg);
    void popRoute(CommonParams arg, RouterResult<Void> result);
    void enablePanGesture(PanGestureParams arg);
    void popUtilRouter(CommonParams arg);

    /** Sets up an instance of `NativeRouterApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NativeRouterApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeRouterApi.pushNativeRoute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CommonParams input = CommonParams.fromMap((Map<String, Object>)message);
              api.pushNativeRoute(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeRouterApi.pushFlutterRoute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CommonParams input = CommonParams.fromMap((Map<String, Object>)message);
              api.pushFlutterRoute(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeRouterApi.popRoute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CommonParams input = CommonParams.fromMap((Map<String, Object>)message);
              api.popRoute(input, result -> {
                wrapped.put("result", null);
                reply.reply(wrapped);
              });

            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeRouterApi.enablePanGesture", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PanGestureParams input = PanGestureParams.fromMap((Map<String, Object>)message);
              api.enablePanGesture(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeRouterApi.popUtilRouter", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CommonParams input = CommonParams.fromMap((Map<String, Object>)message);
              api.popUtilRouter(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
